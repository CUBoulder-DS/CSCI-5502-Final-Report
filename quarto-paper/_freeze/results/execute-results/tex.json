{
  "hash": "dca062a6eb6f8df0fbaaa2273f5d27d7",
  "result": {
    "engine": "jupyter",
    "markdown": "# Results\n\n\n## Clustering\n\nSee @fig-rand\n\n::: {#fig-rand .cell layout-ncol='2' execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![Rand Index Matrix](results_files/figure-pdf/fig-rand-output-1.png){#fig-rand-1}\n:::\n\n::: {.cell-output .cell-output-display}\n![Adjusted Rand Index](results_files/figure-pdf/fig-rand-output-2.png){#fig-rand-2}\n:::\n\nMatrices of the rand index as compared across all clustering methods, and compared to the original source category labels. The scipy and sklearn clustering methods were done using a precomputed Gower matrix.\n:::\n\n\n## Supervised Learning Models Performance\n\nSee @tbl-perfs\n\n::: {#tbl-perfs .cell tbl-cap='The performance values and some settings for the supervized learning models ran, sorted by accuracy.' execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>Accuracy</th>\n      <th>precision</th>\n      <th>recall</th>\n      <th>f1-score</th>\n      <th>support</th>\n      <th>TrainIters</th>\n      <th>LossFcn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>HistGradientBoostingClassifier</td>\n      <td>0.7144</td>\n      <td>0.7147</td>\n      <td>0.7144</td>\n      <td>0.7145</td>\n      <td>138273.0</td>\n      <td>NaN</td>\n      <td>log_loss</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>HistGradientBoostingClassifier</td>\n      <td>0.6602</td>\n      <td>0.6600</td>\n      <td>0.6602</td>\n      <td>0.6601</td>\n      <td>138273.0</td>\n      <td>NaN</td>\n      <td>log_loss</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>RandomForestClassifier</td>\n      <td>0.6519</td>\n      <td>0.6519</td>\n      <td>0.6519</td>\n      <td>0.6519</td>\n      <td>138273.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>DecisionTreeClassifier</td>\n      <td>0.6108</td>\n      <td>0.6107</td>\n      <td>0.6108</td>\n      <td>0.6108</td>\n      <td>138273.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>LinearSVC</td>\n      <td>0.5703</td>\n      <td>0.5663</td>\n      <td>0.5703</td>\n      <td>0.5599</td>\n      <td>138273.0</td>\n      <td>12</td>\n      <td>squared_hinge</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>LogisticRegression</td>\n      <td>0.5703</td>\n      <td>0.5662</td>\n      <td>0.5703</td>\n      <td>0.5601</td>\n      <td>138273.0</td>\n      <td>[0]</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SGDClassifier</td>\n      <td>0.5695</td>\n      <td>0.5655</td>\n      <td>0.5695</td>\n      <td>0.5550</td>\n      <td>138273.0</td>\n      <td>41</td>\n      <td>log_loss</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Perceptron</td>\n      <td>0.4719</td>\n      <td>0.4565</td>\n      <td>0.4719</td>\n      <td>0.4550</td>\n      <td>138273.0</td>\n      <td>11</td>\n      <td>perceptron</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Performance Plots\n\nSee @fig-perf-plots\n\n::: {#fig-perf-plots .cell layout-ncol='3' layout-nrow='2' execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![Perceptron: ROC Curve](results_files/figure-pdf/fig-perf-plots-output-1.pdf){#fig-perf-plots-1}\n:::\n\n::: {.cell-output .cell-output-display}\n![Perceptron: confusion matrix](results_files/figure-pdf/fig-perf-plots-output-2.pdf){#fig-perf-plots-2}\n:::\n\n::: {.cell-output .cell-output-display}\n![Perceptron: precison-recall curve](results_files/figure-pdf/fig-perf-plots-output-3.pdf){#fig-perf-plots-3}\n:::\n\n::: {.cell-output .cell-output-display}\n![HistGradientBoostingClassifier: ROC Curve](results_files/figure-pdf/fig-perf-plots-output-4.pdf){#fig-perf-plots-4}\n:::\n\n::: {.cell-output .cell-output-display}\n![HistGradientBoostingClassifier: confusion matrix](results_files/figure-pdf/fig-perf-plots-output-5.pdf){#fig-perf-plots-5}\n:::\n\n::: {.cell-output .cell-output-display}\n![HistGradientBoostingClassifier: precison-recall curve](results_files/figure-pdf/fig-perf-plots-output-6.pdf){#fig-perf-plots-6}\n:::\n\nThe ROC, confusion matrix, and precision-recall curves for the best and worst performing model.\n:::\n\n\n",
    "supporting": [
      "results_files\\figure-pdf"
    ],
    "filters": []
  }
}